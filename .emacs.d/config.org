* Terminal
** Setting default shell to fish
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/fish")
  (defadvice ansi-term (before force-fish)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Modifying defaults
** Disabling GUI elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** subword
camelCasedNames are treated as separate words.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** electric-pair
Auto-generates close parenthesis
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode 1)
#+END_SRC

** Disable startup screen
Opens to scratchpad instead.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Turn off bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Use y/n for prompts instead of yes/no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC

** Prettify symbols
For example, "lambda" is displayed as "Î»".
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

** Always show line numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'text-mode-hook 'linum-mode)
  (setq linum-format "%4d ")
#+END_SRC
* Themes
** doom-themes
Collection of themes from doom-emacs.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :ensure t
    :config
    (setq doom-themes-enable-bold t     ; if nil, bold is disabled globally
	  doom-themes-enable-italics t) ; if nil, italics is disabled globally
    (load-theme 'doom-one t)

    ;; enable custom treemacs theme
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)

    (doom-themes-org-config))
#+END_SRC
* Packages
** which-key
Shows what's bound to all the different key chords if you wait after pressing a prefix.
#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t
    :init (which-key-mode))
#+END_SRC

** evil
Adds all of vim's keybindings to emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config (evil-mode 1))

  ;; for compatibility with other packages
  (use-package evil-collection :ensure t
    :after evil
    :config (evil-collection-init))
#+END_SRC

** avy
Jump to places in the buffer super fast
#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** ivy + extras
Search/completion framework
#+BEGIN_SRC emacs-lisp
  (use-package ivy :ensure t
    :defer 0.1
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-vertical-buffers t)
    :config (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t
    :after ivy
    :config (counsel-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swiper :ensure t
    :after ivy
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)))
#+END_SRC

** rainbow-mode
Highlights hex codes in their color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :ensure t
    :init (rainbow-mode 1))
#+END_SRC

** rainbow-delimiters
Matches corresponding parentheses with same color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** spaceline
Powerline with spacemacs' theme
#+BEGIN_SRC emacs-lisp
  (use-package spaceline :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator 'arrow)
    (spaceline-spacemacs-theme))
#+END_SRC

** diminish
Hides minor modes from the powerline.
#+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t
    :after spaceline
    :config
    (mapc #'diminish
	  '(which-key-mode
	    ivy-mode
	    counsel-mode
	    dante-mode
	    rainbow-mode)))
#+END_SRC

** all-the-icons
Nice looking icons for filetypes, git, etc.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)
  ;; this one makes it compatible with ivy
  (use-package all-the-icons-ivy :ensure t
    :after all-the-icons
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+END_SRC
** flycheck
Allows linters and such to underline errors, warnings, etc.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :ensure t
    :diminish
    :defer 2
    :init (global-flycheck-mode))
#+END_SRC
** haskell-mode + dante
Interactive haskell mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode :ensure t)

  (use-package attrap :ensure t)

  (use-package dante :ensure t
    :after haskell-mode
    :commands dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-hook)
    (add-hook 'haskell-mode-hook 'dante-mode)
    (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
    :config
    (flycheck-add-next-checker 'haskell-dante '(info . haskell-hlint)))
#+END_SRC
** format-all
Code formatter
#+BEGIN_SRC emacs-lisp
  (use-package format-all :ensure t
    :config
    (global-set-key (kbd "C-L") 'format-all-buffer))
#+END_SRC

** treemacs
Interactive file tree on left hand side of frame.
#+BEGIN_SRC emacs-lisp
  (use-package treemacs :ensure t
    :config (treemacs))

  ;; integration with evil
  (use-package treemacs-evil :ensure t
    :after treemacs evil)

  ;; integration with magit
  (use-package treemacs-magit :ensure t
    :after treemacs magit)

  ;; use all-the-icons for files/folders in tree
  (use-package treemacs-all-the-icons :ensure t
    :after treemacs all-the-icons)
#+END_SRC

** dashboard
Nice looking customizable startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard :ensure t
    :defer nil
    :preface
    (defun create-scratch-buffer ()
      "Create scratch buffer"
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-set-footer nil)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
	  `(;; line 1
	    ((,nil
	      "Open scratch buffer"
	      "Switch to scratch buffer"
	      (lambda (&rest _) (create-scratch-buffer))
	      'default)
	     (,nil
	      "Edit config.org"
	      "Open config.org for editing."
	      (lambda (&rest _) (config-edit))
	      'default)))))
#+END_SRC

** magit
Git integration for emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
#+END_SRC
* Custom
** edit and reload config
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    "Open config.org file in a buffer for editing."
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-edit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Evaluate all elisp snippets in config.org"
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** org mode elisp snippet shortcut
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** toggle refill-mode in org
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map
    (kbd "C-x w") 'refill-mode)
#+END_SRC
